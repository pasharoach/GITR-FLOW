const { app, BrowserWindow, Menu, ipcMain, globalShortcut, dialog } = require('electron');
const { autoUpdater } = require('electron-updater');
const path = require('path');

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS Intel
if (process.platform === 'darwin' && process.arch === 'x64') {
  // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è Intel macOS
  app.commandLine.appendSwitch('--ignore-certificate-errors');
  app.commandLine.appendSwitch('--ignore-ssl-errors');
  app.commandLine.appendSwitch('--allow-running-insecure-content');
  app.commandLine.appendSwitch('--disable-web-security');
  app.commandLine.appendSwitch('--no-sandbox');
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é
  app.commandLine.appendSwitch('--disable-features', 'VizDisplayCompositor');
  app.commandLine.appendSwitch('--enable-gpu-rasterization');
  app.commandLine.appendSwitch('--disable-background-timer-throttling');
  app.commandLine.appendSwitch('--disable-backgrounding-occluded-windows');
  app.commandLine.appendSwitch('--disable-renderer-backgrounding');
  app.commandLine.appendSwitch('--disable-ipc-flooding-protection');
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å–µ—Ç–∏
  app.commandLine.appendSwitch('--disable-extensions');
  app.commandLine.appendSwitch('--disable-plugins');
  app.commandLine.appendSwitch('--disable-default-apps');
  app.commandLine.appendSwitch('--disable-sync');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTP/1.1
  app.commandLine.appendSwitch('--disable-http2');
  app.commandLine.appendSwitch('--disable-quic');
}

let mainWindow;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
autoUpdater.checkForUpdatesAndNotify();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è macOS Intel (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)
if (process.platform === 'darwin' && process.arch === 'x64') {
  autoUpdater.requestHeaders = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
  };
}

function createWindow() {
  // –†–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  const isWindows = process.platform === 'win32';
  
  const windowConfig = {
    width: 1400,
    height: 900,
    minWidth: 800,
    minHeight: 600,
    icon: path.join(__dirname, 'assets', 'icon.png'),
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'),
      webSecurity: process.arch !== 'x64', // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è Intel macOS
      allowRunningInsecureContent: process.arch === 'x64', // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è Intel macOS
      experimentalFeatures: process.arch === 'x64', // –í–∫–ª—é—á–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Intel
      enableRemoteModule: process.arch === 'x64' // –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è Intel
    },
    show: false
  };

  // –î–ª—è Windows - –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ –±–µ–∑ —Ä–∞–º–∫–∏ (–∫–∞–∫ –Ω–∞ macOS)
  if (isWindows) {
    windowConfig.frame = false;
    windowConfig.titleBarStyle = 'hidden';
  } else {
    // –î–ª—è macOS - –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ –±–µ–∑ —Ä–∞–º–∫–∏
    windowConfig.frame = false;
    windowConfig.titleBarStyle = 'hidden';
    windowConfig.vibrancy = 'under-window';
    windowConfig.visualEffectState = 'active';
  }

  mainWindow = new BrowserWindow(windowConfig);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  mainWindow.loadFile(path.join(__dirname, 'renderer', 'index.html'));

  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è macOS Intel
  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
    if (errorCode === -2) { // ERR_FAILED
      setTimeout(() => {
        mainWindow.reload();
      }, 2000);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è macOS
  mainWindow.webContents.on('certificate-error', (event, url, error, certificate, callback) => {
    // –î–ª—è Intel macOS - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if (process.arch === 'x64') {
      event.preventDefault();
      callback(true);
    } else if (url.includes('localhost') || url.includes('127.0.0.1')) {
      event.preventDefault();
      callback(true);
    } else {
      callback(false);
    }
  });

  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
  setupAutoUpdater();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function setupAutoUpdater() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 3 —Å–µ–∫—É–Ω–¥—ã)
  setTimeout(() => {
    autoUpdater.checkForUpdatesAndNotify();
  }, 3000);

  // –°–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  autoUpdater.on('checking-for-update', () => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    if (mainWindow) {
      mainWindow.webContents.send('update-status', { status: 'checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...' });
    }
  });

  autoUpdater.on('update-available', (info) => {
    console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', info.version);
    if (mainWindow) {
      mainWindow.webContents.send('update-status', { 
        status: 'available', 
        message: `–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${info.version}`,
        version: info.version,
        releaseNotes: info.releaseNotes
      });
    }
  });

  autoUpdater.on('update-not-available', (info) => {
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:', info.version);
    if (mainWindow) {
      mainWindow.webContents.send('update-status', { 
        status: 'not-available', 
        message: '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è',
        version: info.version
      });
    }
  });

  autoUpdater.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', err);
    if (mainWindow) {
      mainWindow.webContents.send('update-status', { 
        status: 'error', 
        message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${err.message}`
      });
    }
  });

  autoUpdater.on('download-progress', (progressObj) => {
    let log_message = "–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: " + progressObj.bytesPerSecond;
    log_message = log_message + ' - –ó–∞–≥—Ä—É–∂–µ–Ω–æ ' + progressObj.percent + '%';
    log_message = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', log_message);
    
    if (mainWindow) {
      mainWindow.webContents.send('update-progress', {
        percent: Math.round(progressObj.percent),
        transferred: progressObj.transferred,
        total: progressObj.total,
        bytesPerSecond: progressObj.bytesPerSecond
      });
    }
  });

  autoUpdater.on('update-downloaded', (info) => {
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', info.version);
    if (mainWindow) {
      mainWindow.webContents.send('update-status', { 
        status: 'downloaded', 
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${info.version} –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.`,
        version: info.version
      });
    }
  });
}

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function createMenu() {
  const template = [
    {
      label: '–ì–ò–¢–† FLOW',
      submenu: [
        {
          label: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
          role: 'about'
        },
        {
          label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
          click: () => {
            if (mainWindow) {
              mainWindow.webContents.send('open-update-modal');
            }
          }
        },
        { type: 'separator' },
        {
          label: '–í—ã—Ö–æ–¥',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },

    {
      label: '–ü—Ä–∞–≤–∫–∞',
      submenu: [
        { label: '–û—Ç–º–µ–Ω–∏—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+Z' : 'Ctrl+Z', role: 'undo' },
        { label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', accelerator: process.platform === 'darwin' ? 'Shift+Cmd+Z' : 'Ctrl+Y', role: 'redo' },
        { type: 'separator' },
        { label: '–í—ã—Ä–µ–∑–∞—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+X' : 'Ctrl+X', role: 'cut' },
        { label: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+C' : 'Ctrl+C', role: 'copy' },
        { label: '–í—Å—Ç–∞–≤–∏—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+V' : 'Ctrl+V', role: 'paste' },
        { label: '–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ', accelerator: process.platform === 'darwin' ? 'Cmd+A' : 'Ctrl+A', role: 'selectall' }
      ]
    },
    {
      label: '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ',
      submenu: [
        { 
          label: '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', 
          click: () => {
            mainWindow.webContents.send('open-hotkeys-modal');
          }
        }
      ]
    },
    {
      label: '–í–∏–¥',
      submenu: [
        { label: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+R' : 'Ctrl+R', role: 'reload' },
        { type: 'separator' },
        { label: '–£–≤–µ–ª–∏—á–∏—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+Plus' : 'Ctrl+Plus', role: 'zoomIn' },
        { label: '–£–º–µ–Ω—å—à–∏—Ç—å', accelerator: process.platform === 'darwin' ? 'Cmd+-' : 'Ctrl+-', role: 'zoomOut' },
        { label: '–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±', accelerator: process.platform === 'darwin' ? 'Cmd+0' : 'Ctrl+0', role: 'resetZoom' }
      ]
    }
  ];

  const menu = Menu.buildFromTemplate(template);
  
  // –í–∫–ª—é—á–∞–µ–º –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  Menu.setApplicationMenu(menu);
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è DevTools
app.whenReady().then(() => {
  // –î–ª—è macOS
  if (process.platform === 'darwin') {
    globalShortcut.register('Cmd+Option+I', () => {
      if (mainWindow) {
        mainWindow.webContents.toggleDevTools();
      }
    });
  }
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ F12
  globalShortcut.register('F12', () => {
    if (mainWindow) {
      mainWindow.webContents.toggleDevTools();
    }
  });
});

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
ipcMain.handle('minimize-window', () => {
  mainWindow.minimize();
});

ipcMain.handle('maximize-window', () => {
  if (mainWindow.isMaximized()) {
    mainWindow.unmaximize();
  } else {
    mainWindow.maximize();
  }
});

ipcMain.handle('close-window', () => {
  mainWindow.close();
});

app.whenReady().then(() => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
      app.setAboutPanelOptions({
        applicationName: '–ì–ò–¢–† FLOW',
        applicationVersion: '8.0.0',
        version: '8.0.0',
        copyright: '12:21 Studio @ 2025\ndigital@gitr.ru'
    });
  
  createWindow();
  createMenu();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
ipcMain.handle('check-for-updates', () => {
  autoUpdater.checkForUpdatesAndNotify();
});

ipcMain.handle('download-update', () => {
  autoUpdater.downloadUpdate();
});

ipcMain.handle('install-update', () => {
  autoUpdater.quitAndInstall();
});

ipcMain.handle('get-app-version', () => {
  return app.getVersion();
});

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
ipcMain.handle('select-download-folder', async () => {
  try {
    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory'],
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
      return { success: true, folderPath: result.filePaths[0] };
    } else {
      return { success: false, folderPath: null };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏:', error);
    return { success: false, error: error.message };
  }
});

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Intel macOS)
ipcMain.handle('make-http-request', async (event, url, options = {}) => {
  try {
    const https = require('https');
    const http = require('http');
    const { URL } = require('url');
    
    const parsedUrl = new URL(url);
    const isHttps = parsedUrl.protocol === 'https:';
    const client = isHttps ? https : http;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Intel macOS
    const requestOptions = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port || (isHttps ? 443 : 80),
      path: parsedUrl.pathname + parsedUrl.search,
      method: options.method || 'GET',
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        ...options.headers
      }
    };
    
    // –î–ª—è Intel macOS –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if (process.arch === 'x64' && isHttps) {
      requestOptions.rejectUnauthorized = false;
    }
    
    return new Promise((resolve, reject) => {
      const request = client.request(requestOptions, (response) => {
        let data = '';
        
        response.on('data', (chunk) => {
          data += chunk;
        });
        
        response.on('end', () => {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π), –∏–Ω–∞—á–µ IPC –±—Ä–æ—Å–∞–µ—Ç "An object could not be cloned"
          let parsedJson = null;
          try {
            parsedJson = JSON.parse(data);
          } catch (_) {
            parsedJson = null;
          }
          resolve({
            ok: response.statusCode >= 200 && response.statusCode < 300,
            status: response.statusCode,
            statusText: response.statusMessage,
            body: data,
            json: parsedJson
          });
        });
      });
      
      request.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error);
        reject(new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`));
      });
      
      request.on('timeout', () => {
        request.destroy();
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
      });
      
      request.end();
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false, error: error.message };
  }
});

// IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
ipcMain.handle('download-file-to-folder', async (event, fileUrl, fileName, studentName, downloadFolder, moodleToken) => {
  try {
    const https = require('https');
    const http = require('http');
    const fs = require('fs');
    const path = require('path');
    
    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const safeFileName = `${studentName}_${fileName}`.replace(/[<>:"/\\|?*]/g, '_');
    const filePath = path.join(downloadFolder, safeFileName);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ URL –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    let finalUrl = fileUrl;
    if (moodleToken && !fileUrl.includes('token=')) {
      const separator = fileUrl.includes('?') ? '&' : '?';
      finalUrl = `${fileUrl}${separator}token=${moodleToken}`;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    const isHttps = finalUrl.startsWith('https://');
    const client = isHttps ? https : http;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Intel macOS
    const requestOptions = {};
    if (process.arch === 'x64') {
      requestOptions.rejectUnauthorized = false; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      requestOptions.agent = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç
    }
    
    return new Promise((resolve, reject) => {
      const request = client.get(finalUrl, requestOptions, (response) => {
        if (response.statusCode === 200) {
          const fileStream = fs.createWriteStream(filePath);
          response.pipe(fileStream);
          
          fileStream.on('finish', () => {
            fileStream.close();
            resolve({ success: true, filePath: filePath });
          });
          
          fileStream.on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${safeFileName}:`, error);
            reject({ success: false, error: error.message });
          });
        } else {
          reject({ success: false, error: `HTTP ${response.statusCode}` });
        }
      });
      
      request.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${safeFileName}:`, error);
        reject({ success: false, error: error.message });
      });
      
      // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
      request.setTimeout(30000, () => {
        request.destroy();
        reject({ success: false, error: '–¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è' });
      });
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    return { success: false, error: error.message };
  }
});

// –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
app.on('will-quit', () => {
  globalShortcut.unregisterAll();
}); 