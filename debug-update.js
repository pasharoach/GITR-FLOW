// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const https = require('https');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
console.log('');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GitHub API
function checkGitHubAPI() {
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GitHub API...');
    
    const options = {
        hostname: 'api.github.com',
        port: 443,
        path: '/repos/pasharoach/GITR-FLOW/releases/latest',
        method: 'GET',
        headers: {
            'User-Agent': 'GITR-FLOW-Debug',
            'Accept': 'application/vnd.github.v3+json'
        }
    };

    const req = https.request(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
            data += chunk;
        });

        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const release = JSON.parse(data);
                    console.log('‚úÖ GitHub API –¥–æ—Å—Ç—É–ø–µ–Ω');
                    console.log(`üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑: ${release.tag_name}`);
                    console.log(`üìÖ –î–∞—Ç–∞: ${new Date(release.published_at).toLocaleString('ru-RU')}`);
                    console.log('');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ä–µ–ª–∏–∑–∞
                    checkReleaseFiles(release);
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ GitHub API');
                }
            } else {
                console.log(`‚ùå GitHub API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${res.statusCode}`);
                console.log(`üì° –û—Ç–≤–µ—Ç: ${data}`);
            }
        });
    });

    req.on('error', (error) => {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub API: ${error.message}`);
        console.log('');
        console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GitHub –¥–æ—Å—Ç—É–ø–µ–Ω');
    });

    req.end();
}

function checkReleaseFiles(release) {
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ª–∏–∑–∞...');
    
    const requiredFiles = [
        'latest-mac.yml',
        '–ì–ò–¢–† FLOW-7.2.0.dmg',
        '–ì–ò–¢–† FLOW-7.2.0-arm64.dmg'
    ];
    
    const foundFiles = release.assets.map(asset => asset.name);
    
    requiredFiles.forEach(file => {
        if (foundFiles.includes(file)) {
            console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
        } else {
            console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    });
    
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º latest-mac.yml
    checkLatestMacYml(release);
}

function checkLatestMacYml(release) {
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ latest-mac.yml...');
    
    const latestMacAsset = release.assets.find(asset => asset.name === 'latest-mac.yml');
    
    if (latestMacAsset) {
        console.log('‚úÖ latest-mac.yml –Ω–∞–π–¥–µ–Ω');
        console.log(`üìÅ –†–∞–∑–º–µ—Ä: ${latestMacAsset.size} –±–∞–π—Ç`);
        console.log(`üîó URL: ${latestMacAsset.browser_download_url}`);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        downloadLatestMacYml(latestMacAsset.browser_download_url);
    } else {
        console.log('‚ùå latest-mac.yml –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ!');
        console.log('');
        console.log('üîß –†–µ—à–µ–Ω–∏–µ:');
        console.log('   - latest-mac.yml –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ª–∏–∑');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ electron-builder');
    }
}

function downloadLatestMacYml(url) {
    console.log('4Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ latest-mac.yml...');
    
    const https = require('https');
    const parsedUrl = new URL(url);
    
    const options = {
        hostname: parsedUrl.hostname,
        port: 443,
        path: parsedUrl.pathname,
        method: 'GET',
        headers: {
            'User-Agent': 'GITR-FLOW-Debug'
        }
    };

    const req = https.request(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
            data += chunk;
        });

        res.on('end', () => {
            if (res.statusCode === 200) {
                console.log('‚úÖ latest-mac.yml —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
                console.log(data);
                console.log('');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                try {
                    const yaml = require('js-yaml');
                    const parsed = yaml.load(data);
                    console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ YAML:');
                    console.log(`   –í–µ—Ä—Å–∏—è: ${parsed.version}`);
                    console.log(`   –§–∞–π–ª—ã: ${parsed.files ? parsed.files.length : 0}`);
                    console.log(`   –ü—É—Ç—å –∫ DMG: ${parsed.path || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                } catch (error) {
                    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å YAML (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)');
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è latest-mac.yml: ${res.statusCode}`);
            }
        });
    });

    req.on('error', (error) => {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ latest-mac.yml: ${error.message}`);
    });

    req.end();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
checkGitHubAPI();
