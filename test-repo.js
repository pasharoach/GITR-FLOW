// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
const https = require('https');

console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
console.log('');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
const repoNames = [
    'Notebook',
    'GITR-FLOW', 
    'gitr-flow',
    '–ì–ò–¢–†-FLOW'
];

let currentRepo = 0;

function checkRepo(repoName) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: pasharoach/${repoName}`);
    
    const options = {
        hostname: 'api.github.com',
        port: 443,
        path: `/repos/pasharoach/${repoName}`,
        method: 'GET',
        headers: {
            'User-Agent': 'GITR-FLOW-Test',
            'Accept': 'application/vnd.github.v3+json'
        }
    };

    const req = https.request(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
            data += chunk;
        });

        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const repo = JSON.parse(data);
                    console.log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω: ${repo.full_name}`);
                    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${repo.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
                    console.log(`üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: ${repo.private ? '–î–∞' : '–ù–µ—Ç'}`);
                    console.log(`‚≠ê –ó–≤–µ–∑–¥: ${repo.stargazers_count}`);
                    console.log('');
                    
                    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–ª–∏–∑—ã
                    checkReleases(repoName);
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
                }
            } else if (res.statusCode === 404) {
                console.log(`‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (404)`);
                console.log('');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                currentRepo++;
                if (currentRepo < repoNames.length) {
                    setTimeout(() => checkRepo(repoNames[currentRepo]), 1000);
                } else {
                    console.log('‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    console.log('');
                    console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
                    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
                    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É–±–ª–∏—á–Ω—ã–π');
                    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ ${res.statusCode}: ${data}`);
            }
        });
    });

    req.on('error', (error) => {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ${error.message}`);
    });

    req.end();
}

function checkReleases(repoName) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–∏–∑—ã –¥–ª—è: pasharoach/${repoName}`);
    
    const options = {
        hostname: 'api.github.com',
        port: 443,
        path: `/repos/pasharoach/${repoName}/releases`,
        method: 'GET',
        headers: {
            'User-Agent': 'GITR-FLOW-Test',
            'Accept': 'application/vnd.github.v3+json'
        }
    };

    const req = https.request(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
            data += chunk;
        });

        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const releases = JSON.parse(data);
                    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: ${releases.length}`);
                    
                    if (releases.length > 0) {
                        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã:');
                        releases.slice(0, 3).forEach(release => {
                            console.log(`   - ${release.tag_name} (${new Date(release.published_at).toLocaleDateString('ru-RU')})`);
                        });
                        
                        const release720 = releases.find(r => r.tag_name === 'v7.2.0');
                        if (release720) {
                            console.log('');
                            console.log('üéâ –†–µ–ª–∏–∑ v7.2.0 –Ω–∞–π–¥–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.');
                        } else {
                            console.log('');
                            console.log('‚ö†Ô∏è  –†–µ–ª–∏–∑ v7.2.0 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑.');
                        }
                    } else {
                        console.log('‚ö†Ô∏è  –†–µ–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑.');
                    }
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–ª–∏–∑–æ–≤');
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–æ–≤: ${res.statusCode}`);
            }
        });
    });

    req.on('error', (error) => {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–ª–∏–∑–æ–≤: ${error.message}`);
    });

    req.end();
}

// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkRepo(repoNames[currentRepo]);
